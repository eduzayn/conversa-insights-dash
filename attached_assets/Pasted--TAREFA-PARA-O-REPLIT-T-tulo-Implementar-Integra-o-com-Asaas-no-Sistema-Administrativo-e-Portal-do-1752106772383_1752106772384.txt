 TAREFA PARA O REPLIT
T√≠tulo: Implementar Integra√ß√£o com Asaas no Sistema Administrativo e Portal do Aluno

üéØ Objetivo
Integrar o sistema ao gateway de pagamento Asaas, permitindo:

Gest√£o de cobran√ßas no painel administrativo

Exibi√ß√£o de cobran√ßas e status de pagamento no portal do aluno

Controle autom√°tico de acesso com base nos pagamentos

üß© Funcionalidades a serem implementadas
1. Servi√ßo Principal: AsaasService
Criar um servi√ßo chamado AsaasService contendo os seguintes m√©todos:

ts
Copiar
Editar
testConnection(): Promise<{ success: boolean; message: string }>
importAllPayments(): Promise<void>
syncAllPayments(): Promise<void>
processWebhookEvent(event: any): Promise<{ success: boolean; message: string }>
validateConfiguration(): { valid: boolean; message: string }
Configura√ß√£o da API Asaas (padr√£o):

ts
Copiar
Editar
const ASAAS_CONFIG = {
  baseURL: 'https://api.asaas.com/v3',
  apiKey: process.env.ASAAS_API_KEY || '',
  timeout: 30000,
  retryAttempts: 3
};
2. Banco de Dados ‚Äì Tabela de Pagamentos
Criar tabela payments com o seguinte schema simplificado:

sql
Copiar
Editar
id SERIAL PRIMARY KEY,
tenant_id INTEGER NOT NULL,
user_id INTEGER NOT NULL,
course_id INTEGER,
amount INTEGER NOT NULL, -- em centavos
status TEXT DEFAULT 'pending',
payment_method TEXT,
transaction_id TEXT,
paid_at TIMESTAMP,
external_id TEXT,
description TEXT,
due_date TIMESTAMP,
payment_url TEXT,
created_at TIMESTAMP DEFAULT NOW(),
updated_at TIMESTAMP DEFAULT NOW()
Status poss√≠veis:
'pending', 'paid', 'failed', 'refunded'

3. Endpoints da API
Administra√ß√£o:
GET /api/asaas/status ‚Üí Testa conectividade com o Asaas

POST /api/asaas/payments/import ‚Üí Importa cobran√ßas

POST /api/asaas/payments/sync ‚Üí Sincroniza status

GET /api/asaas/payments ‚Üí Lista de cobran√ßas

POST /api/webhooks/asaas ‚Üí Recebe notifica√ß√µes do Asaas

Portal do Aluno:
GET /api/aluno/pagamentos ‚Üí Lista os pagamentos do aluno autenticado

4. P√°gina Administrativa
Criar p√°gina em /admin/financeiro/cobrancas com:

Lista de cobran√ßas

Filtros por aluno, curso, status e data

Bot√µes:

"Importar Cobran√ßas"

"Sincronizar"

Atualiza√ß√µes via WebSocket ao receber webhook

5. Portal do Aluno ‚Äì P√°gina de Pagamentos
Criar p√°gina /portal/pagamentos com:

Lista de cobran√ßas do aluno autenticado

Exibi√ß√£o de:

T√≠tulo

Valor

Data de vencimento

Status

Bot√£o para copiar link de pagamento

Caso a cobran√ßa esteja vencida h√° mais de 30 dias:

Exibir alerta de acesso bloqueado

Esse controle tamb√©m ser√° usado no m√≥dulo de cursos (restri√ß√£o de acesso)

6. Webhook
Endpoint: POST /api/webhooks/asaas

Responsabilidades:

Atualizar o status da cobran√ßa no banco

Enviar atualiza√ß√£o via WebSocket (payment_updated)

Logar a opera√ß√£o

7. Seguran√ßa
Armazenar ASAAS_API_KEY como vari√°vel de ambiente

Verificar se come√ßa com $aact_

Isolar os dados por tenant_id

Validar a estrutura do webhook

(No futuro) implementar valida√ß√£o de assinatura HMAC

üö® Importante
N√£o quebrar nada que j√° esteja funcionando no painel ou no portal

Toda l√≥gica da integra√ß√£o deve estar isolada em um m√≥dulo/pasta (services/asaas ou similar)

Garantir que alunos s√≥ vejam seus pr√≥prios pagamentos

Acesso ao conte√∫do deve considerar a regra de bloqueio por inadimpl√™ncia

