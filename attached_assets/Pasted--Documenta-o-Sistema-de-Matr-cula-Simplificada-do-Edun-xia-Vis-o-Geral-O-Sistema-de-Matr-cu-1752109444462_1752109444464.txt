# Documentação - Sistema de Matrícula Simplificada do Edunéxia

## Visão Geral

O Sistema de Matrícula Simplificada é uma funcionalidade abrangente do Edunéxia que permite o processamento automatizado de matrículas com integração completa ao gateway de pagamentos Asaas, criação automática de usuários e contratos educacionais.

## Arquitetura do Sistema

### Componentes Principais

1. **Frontend (React + TypeScript)**
   - Interface administrativa para criação de matrículas
   - Formulário validado com Zod
   - Listagem e gerenciamento de matrículas existentes
   - Visualização em tempo real do status das matrículas

2. **Backend (Node.js + Express)**
   - API REST para operações CRUD
   - Integração com Asaas para pagamentos
   - Criação automática de usuários
   - Geração de contratos educacionais
   - Envio de credenciais via SMS

3. **Banco de Dados (PostgreSQL)**
   - Tabela `simplified_enrollments` para armazenar matrículas
   - Integração com tabelas existentes (users, courses, tenants)
   - Suporte a multi-tenancy com isolamento de dados

## Fluxo Completo de Funcionamento

### 1. Criação da Matrícula
```mermaid
graph TD
    A[Usuário preenche formulário] --> B[Validação dos dados]
    B --> C[Criação da matrícula no BD]
    C --> D[Verificação/criação do cliente no Asaas]
    D --> E[Geração do link de pagamento]
    E --> F[Atualização da matrícula com dados do pagamento]
    F --> G[Verificação/criação do usuário aluno]
    G --> H[Criação da matrícula formal]
    H --> I[Envio de credenciais via SMS]
    I --> J[Geração do contrato educacional]
```

### 2. Status da Matrícula
- **pending**: Matrícula criada, aguardando processamento
- **waiting_payment**: Link de pagamento gerado, aguardando pagamento
- **payment_confirmed**: Pagamento confirmado via webhook
- **completed**: Matrícula finalizada com sucesso
- **cancelled**: Matrícula cancelada
- **failed**: Erro no processamento

## Estrutura de Arquivos

### Frontend
```
client/src/pages/admin/simplified-enrollment-page.tsx
client/src/pages/hub/simplified-enrollment-page.tsx (re-exporta a página admin)
```

### Backend
```
server/simplified-enrollment-routes.ts          # Rotas da API
server/services/payment-service.ts              # Integração com Asaas
server/services/contract-service.ts             # Geração de contratos
server/services/notification-service.ts         # Envio de SMS
server/services/unified-asaas-service.ts        # Serviço unificado do Asaas
server/database-storage.ts                      # Métodos de banco de dados
```

### Schema
```
shared/schema.ts                                 # Definições de tipos e validações
```

## Detalhamento dos Componentes

### 1. Frontend - SimplifiedEnrollmentPage.tsx

#### Funcionalidades
- **Formulário de Criação**: Campos validados para dados do aluno, curso, pagamento
- **Listagem de Matrículas**: Visualização de todas as matrículas do tenant
- **Filtros e Busca**: Filtros por status, curso, período
- **Ações**: Atualização de status, visualização de detalhes
- **Integração em Tempo Real**: Atualização automática via React Query

#### Campos do Formulário
```typescript
interface FormData {
  studentName: string;          // Nome completo do aluno
  studentEmail: string;         // Email (será o username)
  studentCpf: string;           // CPF para validação
  studentPhone?: string;        // Telefone para SMS (opcional)
  courseId: string;             // ID do curso selecionado
  amount: string;               // Valor da matrícula
  installments: string;         // Número de parcelas (1-12)
  paymentMethod: enum;          // BOLETO, CREDIT_CARD, PIX, UNDEFINED
  poloId?: string;             // ID do polo educacional (opcional)
  consultantId: string;         // ID do consultor responsável
  tenantId: string;             // ID da instituição
}
```

### 2. Backend - Rotas da API

#### POST /api/simplified-enrollments
Cria uma nova matrícula simplificada.

**Fluxo de Processamento:**
1. Validação dos dados de entrada com Zod
2. Criação da matrícula no banco de dados
3. Criação/recuperação do cliente no Asaas
4. Geração do link de pagamento no Asaas
5. Atualização da matrícula com dados do pagamento
6. Criação automática do usuário (se não existir)
7. Criação da matrícula formal no sistema
8. Envio de credenciais via SMS
9. Geração do contrato educacional

#### GET /api/simplified-enrollments
Lista matrículas por tenant com filtros opcionais.

#### PATCH /api/simplified-enrollments/:id/status
Atualiza o status de uma matrícula.

### 3. Integração com Asaas (PaymentService)

#### Funcionalidades
- **Validação de CPF**: Algoritmo completo de validação
- **Gestão de Clientes**: Criação/recuperação automática
- **Criação de Pagamentos**: Links de checkout personalizados
- **Suporte a Parcelamento**: Até 12 parcelas
- **Múltiplas Formas de Pagamento**: Boleto, cartão, PIX

#### Métodos Principais
```typescript
// Criar ou recuperar cliente
getOrCreateCustomer(customerData: CreateCustomerPayload): Promise<AsaasCustomer>

// Criar checkout de matrícula
createMatriculaCheckout(checkoutData: MatriculaCheckoutData): Promise<CheckoutResponse>

// Validar CPF
private isValidCPF(cpf: string): boolean
```

### 4. Geração de Contratos (ContractService)

#### Funcionalidades
- **Geração Automática**: Contratos criados automaticamente após matrícula
- **Numeração Sequencial**: Sistema de numeração CONT-ANO-SEQUENCIAL
- **Template Dinâmico**: Preenchimento automático com dados da matrícula
- **Integração Completa**: Link com matrícula simplificada e formal

#### Estrutura do Contrato
```typescript
interface ContractData {
  contractNumber: string;        // CONT-2025-00001
  tenantId: number;             // Instituição
  studentId: number;            // Aluno
  courseId: number;             // Curso
  simplifiedEnrollmentId: number; // Matrícula simplificada
  enrollmentId?: number;        // Matrícula formal (opcional)
  contractText: string;         // Texto completo do contrato
  totalValue: number;           // Valor total em centavos
  installments: number;         // Número de parcelas
  installmentValue: number;     // Valor por parcela
  status: string;               // pending, active, completed, cancelled
}
```

### 5. Notificações SMS (NotificationService)

#### Funcionalidades
- **Integração com Twilio**: Envio real de SMS
- **Modo de Simulação**: Fallback para desenvolvimento
- **Formatação de Números**: Padronização internacional (+55)
- **Credenciais Automáticas**: Envio de username e senha

#### Formato da Mensagem
```
Olá [Nome], bem-vindo(a) ao Edunéxia! 
Seus dados de acesso são:
Usuário: [email]
Senha: [CPF sem formatação]
Acesse: https://portal.edunexia.com
```

### 6. Modelo de Dados (Schema)

#### Tabela simplified_enrollments
```sql
CREATE TABLE simplified_enrollments (
  id SERIAL PRIMARY KEY,
  tenant_id INTEGER NOT NULL REFERENCES tenants(id),
  course_id INTEGER NOT NULL REFERENCES courses(id),
  student_id INTEGER REFERENCES users(id),
  student_name TEXT NOT NULL,
  student_email TEXT NOT NULL,
  student_cpf TEXT NOT NULL,
  student_phone TEXT,
  polo_id INTEGER REFERENCES users(id),
  consultant_id INTEGER REFERENCES users(id),
  amount INTEGER NOT NULL,
  installments INTEGER DEFAULT 1,
  payment_method TEXT DEFAULT 'BOLETO',
  external_reference TEXT,
  payment_url TEXT,
  asaas_customer_id TEXT,
  asaas_payment_id TEXT,
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  completed_at TIMESTAMP,
  cancelled_at TIMESTAMP
);
```

#### Tipos TypeScript
```typescript
// Schema de inserção (sem campos auto-gerados)
export const insertSimplifiedEnrollmentSchema = createInsertSchema(simplifiedEnrollments)
  .omit({
    id: true,
    createdAt: true,
    updatedAt: true,
    completedAt: true,
    cancelledAt: true,
    studentId: true,
    asaasCustomerId: true,
    asaasPaymentId: true,
    paymentUrl: true,
    externalReference: true,
  });

// Tipos inferidos
export type SimplifiedEnrollment = typeof simplifiedEnrollments.$inferSelect;
export type InsertSimplifiedEnrollment = z.infer<typeof insertSimplifiedEnrollmentSchema>;
```

## Configuração e Requisitos

### Variáveis de Ambiente Necessárias

#### Asaas (Pagamentos)
```env
ASAAS_API_KEY=seu_token_de_producao_asaas
ASAAS_ZAYN_KEY=token_alternativo_se_necessario
```

#### Twilio (SMS)
```env
TWILIO_ACCOUNT_SID=seu_account_sid
TWILIO_AUTH_TOKEN=seu_auth_token
TWILIO_PHONE_NUMBER=+5511999999999
```

#### Banco de Dados
```env
DATABASE_URL=postgresql://usuario:senha@host:porta/database
```

### Dependências do Projeto
```json
{
  "dependencies": {
    "axios": "^1.x.x",
    "twilio": "^4.x.x",
    "zod": "^3.x.x",
    "drizzle-orm": "^0.x.x",
    "@tanstack/react-query": "^5.x.x",
    "@hookform/resolvers": "^3.x.x"
  }
}
```

## Fluxos de Negócio

### 1. Matrícula com Novo Aluno
1. Consultor preenche formulário com dados do candidato
2. Sistema valida dados e cria matrícula pendente
3. Cliente é criado no Asaas com dados fornecidos
4. Link de pagamento é gerado e enviado para o candidato
5. Candidato efetua pagamento através do link
6. Webhook do Asaas confirma pagamento
7. Sistema cria automaticamente o usuário com:
   - Username: email fornecido
   - Senha: CPF sem formatação
   - Role: student
8. Matrícula formal é criada no sistema
9. SMS com credenciais é enviado para o telefone
10. Contrato educacional é gerado automaticamente

### 2. Matrícula com Aluno Existente
1. Sistema detecta email já cadastrado
2. Pula etapa de criação de usuário
3. Associa matrícula ao usuário existente
4. SMS informa que deve usar "Esqueci minha senha"
5. Continua fluxo normal de contrato

### 3. Tratamento de Erros
- **Erro no Asaas**: Matrícula fica com status 'failed'
- **Erro no SMS**: Continua fluxo (modo simulação)
- **Erro no Contrato**: Log do erro, não interrompe fluxo
- **Dados Inválidos**: Validação Zod impede criação

## Segurança e Isolamento

### Multi-Tenancy
- Todas as consultas filtradas por `tenant_id`
- Row-Level Security no PostgreSQL
- Validação de acesso em todas as rotas

### Validação de Dados
- **Frontend**: Validação em tempo real com Zod
- **Backend**: Re-validação obrigatória
- **CPF**: Algoritmo completo de validação
- **Email**: Validação de formato e unicidade

### Tratamento de Erros
- Logs detalhados para auditoria
- Fallbacks para serviços externos
- Mensagens de erro amigáveis para usuários

## Monitoramento e Logs

### Logs Principais
```javascript
// Criação de matrícula
console.log('Matrícula simplificada criada:', { id, studentName, amount });

// Integração Asaas
console.log('Cliente criado no Asaas:', { id, name });
console.log('Link de pagamento gerado:', { id, url });

// Criação de usuário
console.log('Novo usuário criado:', { id, email });

// Envio de SMS
console.log('SMS enviado:', { phone, sid });

// Geração de contrato
console.log('Contrato gerado:', { contractId, enrollmentId });
```

### Monitoramento de Performance
- Tempo de resposta da API Asaas
- Taxa de sucesso de envio de SMS
- Taxa de conversão de matrículas
- Tempo total do fluxo de matrícula

## Testes e Validação

### Cenários de Teste
1. **Matrícula Completa**: Fluxo end-to-end com sucesso
2. **Aluno Existente**: Matrícula com email já cadastrado
3. **Falha no Pagamento**: Tratamento de erro do Asaas
4. **Sem SMS**: Funcionamento sem credenciais Twilio
5. **Multi-tenant**: Isolamento entre diferentes instituições

### Dados de Teste
```javascript
const testEnrollment = {
  studentName: "João Silva",
  studentEmail: "joao.silva@email.com",
  studentCpf: "12345678901",
  studentPhone: "+5511999999999",
  courseId: 1,
  amount: 50000, // R$ 500,00 em centavos
  installments: 3,
  paymentMethod: "BOLETO"
};
```

## Considerações de Produção

### Performance
- Índices no banco para consultas por tenant_id e status
- Cache de consultas de cursos com React Query
- Paginação para listagens extensas

### Escalabilidade
- Processamento assíncrono para operações longas
- Queue system para envio de SMS em lote
- Rate limiting para APIs externas

### Backup e Recuperação
- Backup automático dos dados de matrícula
- Logs de auditoria para rastreabilidade
- Recuperação de webhooks perdidos

### Compliance
- Proteção de dados pessoais (LGPD)
- Criptografia de dados sensíveis
- Logs de acesso e modificações

## Roadmap de Melhorias

### Versão Futura
1. **Dashboard Analítico**: Métricas de conversão e performance
2. **Notificações Push**: Alternativa ao SMS
3. **Integração WhatsApp**: Envio de credenciais via WhatsApp
4. **Assinatura Digital**: Contratos com assinatura eletrônica
5. **API Webhooks**: Notificações para sistemas externos
6. **Multi-gateway**: Suporte a outros gateways de pagamento

### Otimizações Técnicas
1. **Cache Redis**: Cache de dados frequentes
2. **Queue System**: Processamento assíncrono
3. **Microserviços**: Separação em serviços independentes
4. **API GraphQL**: API mais eficiente para frontend
5. **Testes Automatizados**: Cobertura completa de testes

## Conclusão

O Sistema de Matrícula Simplificada do Edunéxia representa uma solução completa e robusta para automação do processo de matrícula, integrando pagamentos, criação de usuários, contratos e notificações em um fluxo único e eficiente.

A arquitetura modular permite extensibilidade e manutenção facilitada, enquanto os múltiplos pontos de validação e tratamento de erro garantem confiabilidade em ambiente de produção.

---

**Última atualização**: Janeiro 2025  
**Versão**: 1.0  
**Autores**: Equipe de Desenvolvimento Edunéxia